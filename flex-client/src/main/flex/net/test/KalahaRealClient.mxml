<?xml version="1.0" encoding="utf-8"?>

<!-- 
 * Copyright (C) 2009 Cubeia Ltd <info@cubeia.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->	

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" backgroundGradientAlphas="[1.0, 1.0]" backgroundGradientColors="[#BE0000, #080707]" width="1023" xmlns:ns1="*" creationComplete="init()" viewSourceURL="srcview/index.html">

	<mx:Script>
		<![CDATA[
			import com.cubeia.firebase.events.GamePacketEvent;
			import com.cubeia.firebase.io.protocol.ServiceTransportPacket;
			import mx.controls.Alert;
			import com.adobe.serialization.json.JSON;
		
			import com.cubeia.firebase.io.protocol.LeaveResponsePacket;
			import com.cubeia.firebase.io.ProtocolObject;
			import com.cubeia.firebase.io.protocol.JoinRequestPacket
			import com.cubeia.firebase.events.PacketEvent;
			import com.cubeia.firebase.io.protocol.JoinResponsePacket;
			import com.cubeia.firebase.events.LoginResponseEvent;
			import com.cubeia.firebase.model.PlayerInfo;
			import mx.managers.PopUpManager;
			
			import com.cubeia.firebase.events.DisconnectEvent;
			import com.cubeia.firebase.events.ConnectEvent;
			import com.cubeia.firebase.connector.FirebaseClient;
			
			// declare firebaseClient and playerInfo static for access from all modules
			public static var firebaseClient:FirebaseClient = new FirebaseClient();
			public static var playerInfo:PlayerInfo; 

			// popup windows
			private var connectWindow:ConnectWindow;
			private var loginWindow:LoginWindow;
			private var lobbyWindow:LobbyWindow;
			private var tableWindow:TableWindow;
			
			private var hasLoggedIn:Boolean;
			
			// player info
			public static var seat:int;
			public static var tableid:int;
			private var userName:String;
			private var sessionToken:String;
			private var operatorId:int;
			public static var gameId:int;
			 
			private function init():void
			{								
				// Setup connection event listeners
				firebaseClient.addEventListener(ConnectEvent.CONNECT, onFirebaseConnect);
				firebaseClient.addEventListener(DisconnectEvent.DISCONNECT, onFirebaseDisconnect);
				firebaseClient.addEventListener(LoginResponseEvent.LOGIN, onFirebaseLogin);
				
				// Setup packet data listener
				firebaseClient.addEventListener(PacketEvent.PACKET_RECEIVED, onPacketReceived);
				firebaseClient.addEventListener(GamePacketEvent.PACKET_RECEIVED, onGamePacketReceived);

				// Assign values to new properties.
        		var firebaseHost:String = Application.application.parameters.firebaseHost;
		        var firebasePort:String = Application.application.parameters.firebasePort;
		        userName = Application.application.parameters.userName;
		        sessionToken = Application.application.parameters.sessionToken;
		        var operatorIdS:String = Application.application.parameters.operatorId;
		        var gameIdS:String = Application.application.parameters.gameId;
		        operatorId = parseInt(operatorIdS);
		        gameId = parseInt(gameIdS);
		        
		        debug.text += "firebaseHost " + firebaseHost;
		        debug.text += "\nfirebasePort " + firebasePort;
		        debug.text += "\nusersssId " + userName;
		        debug.text += "\ntoken " + sessionToken;
		        debug.text += "\ngameId " + gameId;
		        debug.text += "\noperatorId " + operatorId;
		        
				firebaseClient.open(firebaseHost, firebasePort);
				debug.text += "\nConnecting.. ";
				//firebaseClient.open("localhost", "4123");
			}	
			
			private function onFirebaseConnect(connectEvent:ConnectEvent):void
			{
				// we have a connection to the game server, show login window
				//PopUpManager.removePopUp(connectWindow);
				//firebaseClient.login("localhost", "1", 1);
				firebaseClient.removeEventListener(ConnectEvent.CONNECT, onFirebaseConnect);
				if (!hasLoggedIn) {
					hasLoggedIn = true;
					debug.text += "\nConnected, logging in.. ";
					firebaseClient.login(userName, sessionToken, operatorId);
				}				
				//displayLoginWindow();
			}
			
			private function onFirebaseDisconnect(disconnectEvent:DisconnectEvent):void
			{
				// TODO: add handler for disconnects (loss of network etc.)
			}
			
			private function displayLoginWindow():void
			{
				// setup login event handler
				firebaseClient.addEventListener(LoginResponseEvent.LOGIN, onFirebaseLogin);
				// create and show Login popup window
				loginWindow = new LoginWindow();
				PopUpManager.addPopUp(loginWindow, this);
				PopUpManager.centerPopUp(loginWindow);
			}

			private function onFirebaseLogin(loginEvent:LoginResponseEvent):void
			{
				// user has logged in, save information about the player
				debug.text += "\nLogged in, opening lobby.. ";
				playerInfo = loginEvent.getPlayerInfo();
				// next, we display the lobby
				// openLobbyWindow();		
				var requestTablePacket:ServiceTransportPacket = new ServiceTransportPacket();
				requestTablePacket.idtype = 1;
				requestTablePacket.pid = playerInfo.pid;
				requestTablePacket.seq = 1;
				requestTablePacket.service = "net.kalaha.table.api.TableManager";
				
				var json:String = "{\"gameId\":" + gameId + "}";
				var data:ByteArray = new ByteArray();
				data.writeUTFBytes(json);				
				requestTablePacket.servicedata = data;
				
				KalahaRealClient.firebaseClient.send(requestTablePacket); 	
			}
			
			private function openLobbyWindow():void
			{
				// create and show lobby window
				lobbyWindow = new LobbyWindow();
				PopUpManager.addPopUp(lobbyWindow, this);
				PopUpManager.centerPopUp(lobbyWindow);
			}
			
			private function onPacketReceived(packetEvent:PacketEvent):void
			{
				// we have received a packet from the firebase server,
				// inspect classId and take appropriate action
				var protocolObject:ProtocolObject = packetEvent.getObject();
				switch ( protocolObject.classId() ) {
					case JoinResponsePacket.CLASSID:
						handleJoinResponsePacket(JoinResponsePacket(protocolObject));
						break;
					case LeaveResponsePacket.CLASSID:
						handleLeaveResponsePacket(LeaveResponsePacket(protocolObject));
						break;
					case ServiceTransportPacket.CLASSID:
						handleServiceTransportPacket(ServiceTransportPacket(protocolObject));
						break;
					
				}
			}
			
			private function onGamePacketReceived(gamePacketEvent:GamePacketEvent):void
			{
				tableWindow.onGamePacketReceived(gamePacketEvent);
			}

			private function handleServiceTransportPacket(serviceTransportPacket:ServiceTransportPacket):void
			{
				var data:ByteArray = serviceTransportPacket.servicedata;
				var bytes:int = data.bytesAvailable;
				var msg:String = data.readUTFBytes(bytes);				
				var decoded:Object = JSON.decode(msg);
				
				var tableId:int = decoded.tableId;
				debug.text += "Got service transport: " + msg;
				
				// create a join request packet
				var joinRequestPacket:JoinRequestPacket = new JoinRequestPacket();
				// tell server to pick a random seat
				joinRequestPacket.seat = -1;
				// table id
				joinRequestPacket.tableid = tableId;
				// send the packet to the game server
				KalahaRealClient.firebaseClient.send(joinRequestPacket); 				
			}
	
			private function handleJoinResponsePacket(joinResponsePacket:JoinResponsePacket):void
			{
				if ( joinResponsePacket.status == 0 ) {
					// successful join, remove lobby window and open table window
					PopUpManager.removePopUp(lobbyWindow);
					// save tableid and seat for later 
					seat = joinResponsePacket.seat;
					tableid = joinResponsePacket.tableid;
					// show table popup window
					tableWindow = new TableWindow();
					PopUpManager.addPopUp(tableWindow, this);
					tableWindow.y = 150
					
					firebaseClient.removeEventListener(PacketEvent.PACKET_RECEIVED, onPacketReceived);
				} 
			}

			private function handleLeaveResponsePacket(leaveResponsePacket:LeaveResponsePacket):void
			{
				// player has left the table, close table window and open lobby again
				PopUpManager.removePopUp(tableWindow);
				openLobbyWindow();	
			}
			
		]]>
	</mx:Script>
	
	<mx:Image x="0" y="0" source="@Embed(source='header.png')"/>
	<mx:TextArea x="798" y="170" id="debug" width="215" height="126"/>
	
</mx:Application>
